// Each #kernel tells which function to compile; you can have many kernels
#include "TexelShading.cginc" 
#pragma enable_d3d11_debug_symbols

// common variables
uint g_totalObjectsInView;

// copys data to prev buffer, and initalizes 'g_ObjectToAtlasProperties' 
// TODO: can be done with a simple reference swap?!
// -----------------------------------------------------------------------------
#pragma kernel CopyDataToPreFrameBuffer
RWStructuredBuffer<ObjectToAtlasProperties> g_prev_ObjectToAtlasProperties;
RWStructuredBuffer<ObjectToAtlasProperties> g_ObjectToAtlasProperties;

[numthreads(SINGLE_ROW_THREAD_SIZE, 1, 1)]
void CopyDataToPreFrameBuffer(uint3 id : SV_DispatchThreadID, uint groupIndex : SV_GroupIndex, uint3 groupID : SV_GroupID)
{
    int index = groupIndex + groupID.x * SINGLE_ROW_THREAD_SIZE;
	g_prev_ObjectToAtlasProperties[index] = g_ObjectToAtlasProperties[index];

	g_ObjectToAtlasProperties[index].objectID = index; // reset object ID
	g_ObjectToAtlasProperties[index].sizeExponent = 0; //reset the mipmap level, otherwise the max() function for detecting the highest mipmap level would fail overtime
	g_ObjectToAtlasProperties[index].atlas_ST = 0;
}


#pragma kernel InitalizePrimitiveVisiblity
/*globallycoherent*/ RWStructuredBuffer<uint> g_PrimitiveVisibility;
[numthreads(SINGLE_ROW_THREAD_SIZE, 1, 1)]
void InitalizePrimitiveVisiblity(uint3 id : SV_DispatchThreadID, uint groupIndex : SV_GroupIndex)
{
	g_PrimitiveVisibility[id.x] = 0;
}

// reads the VisibilityBuffer and extracts the visible triangles
// -----------------------------------------------------------------------------
#pragma kernel ExtractCoverage
Texture2D<uint> g_VisibilityBuffer;


uint2 g_VisibilityBuffer_pixelCount;
groupshared uint shared_Object_MipmapLevel[MAXIMAL_OBJECTS_PER_VIEW];
AppendStructuredBuffer<uint> g_ObjectMipMap_append;
[numthreads(COMPUTE_COVERAGE_TILE_SIZE, COMPUTE_COVERAGE_TILE_SIZE,1)]
void ExtractCoverage (uint3 id : SV_DispatchThreadID, uint groupIndex : SV_GroupIndex)
{
	// initalize shared_Object_MipmapLevel
	for (int i = 0; i < MAXIMAL_OBJECTS_PER_VIEW / (COMPUTE_COVERAGE_TILE_SIZE * COMPUTE_COVERAGE_TILE_SIZE); i++)
	{
		shared_Object_MipmapLevel[groupIndex + i * COMPUTE_COVERAGE_TILE_SIZE * COMPUTE_COVERAGE_TILE_SIZE] = 0;
	}	
	AllMemoryBarrierWithGroupSync();

	// read pixel from visiblityBuffer
	uint objectID, primitiveID, mipmapLevel;
	uint px;

	px = g_VisibilityBuffer[id.xy];
	DecodeVisibilityBuffer(
		px,
		/*out*/ objectID,
		/*out*/ primitiveID,
		/*out*/ mipmapLevel);

	if (objectID != 0) // 0 means "undefined"
	{
        // clamp the mipmap level
        mipmapLevel = min(ATLAS_OBJECT_SIZEEXPONENT_MAX, mipmapLevel);
        mipmapLevel = max(ATLAS_OBJECT_SIZEEXPONENT_MIN, mipmapLevel);

		// obtain highest mipmap level of object per thread group
		InterlockedMax(shared_Object_MipmapLevel[objectID], mipmapLevel);

		// "unlock" the triangle for the texel space pass 
		uint baseIndex, subIndex;
		GetVisiblityIDIndicies(objectID, primitiveID, /*out*/ baseIndex, /*out*/ subIndex);
		//InterlockedOr(g_PrimitiveVisibility[baseIndex], 1 << subIndex);
		g_PrimitiveVisibility[baseIndex] |= 1 << subIndex;
	}

	AllMemoryBarrierWithGroupSync();
	for (int j = 0; j < MAXIMAL_OBJECTS_PER_VIEW / (COMPUTE_COVERAGE_TILE_SIZE * COMPUTE_COVERAGE_TILE_SIZE); j++)
	{
		int index = groupIndex + j * COMPUTE_COVERAGE_TILE_SIZE * COMPUTE_COVERAGE_TILE_SIZE;
		if (shared_Object_MipmapLevel[index] != 0)
		{
			// pass highest mipmap level per thread gorup to append buffer for futher processing
			uint packedValue = EncodeVisibilityBuffer(index, 0, shared_Object_MipmapLevel[index]);
			g_ObjectMipMap_append.Append(packedValue);
		}
	}

}

#pragma kernel MipMapMeltDown
ConsumeStructuredBuffer<uint> g_ObjectMipMap_consume;
[numthreads(COMPUTE_COVERAGE_TILE_SIZE, COMPUTE_COVERAGE_TILE_SIZE, 1)]
void MipMapMeltDown(uint3 id : SV_DispatchThreadID, uint groupIndex : SV_GroupIndex)
{
	// initalize shared_Object_MipmapLevel
	for (int i = 0; i < MAXIMAL_OBJECTS_PER_VIEW / (COMPUTE_COVERAGE_TILE_SIZE * COMPUTE_COVERAGE_TILE_SIZE); i++)
	{
		shared_Object_MipmapLevel[i + groupIndex * COMPUTE_COVERAGE_TILE_SIZE * COMPUTE_COVERAGE_TILE_SIZE] = 0;
	}

	AllMemoryBarrierWithGroupSync();
	uint objectID, primitiveID, mipmapLevel;
	
	DecodeVisibilityBuffer(
		1,
		/*out*/ objectID,
		/*out*/ primitiveID,
		/*out*/ mipmapLevel);

	// obtain highest mipmap level of object per thread group
	InterlockedMax(shared_Object_MipmapLevel[objectID], mipmapLevel);

	// store data
	for (int j = 0; j < MAXIMAL_OBJECTS_PER_VIEW / (COMPUTE_COVERAGE_TILE_SIZE * COMPUTE_COVERAGE_TILE_SIZE); j++)
	{
		int index = j + groupIndex * COMPUTE_COVERAGE_TILE_SIZE * COMPUTE_COVERAGE_TILE_SIZE;
		g_ObjectMipMap_append.Append(shared_Object_MipmapLevel[index]);
	}
}

#pragma kernel MipMapFinalize

Buffer<int> g_ObjectMipMapCounterValue;
[numthreads(COMPUTE_COVERAGE_TILE_SIZE * COMPUTE_COVERAGE_TILE_SIZE, 1, 1)]
void MipMapFinalize(uint3 id : SV_DispatchThreadID, uint groupIndex : SV_GroupIndex)
{
	// initalize shared_Object_MipmapLevel
	for (int i = 0; i < MAXIMAL_OBJECTS_PER_VIEW / (COMPUTE_COVERAGE_TILE_SIZE * COMPUTE_COVERAGE_TILE_SIZE); i++)
	{
		shared_Object_MipmapLevel[groupIndex + i * COMPUTE_COVERAGE_TILE_SIZE * COMPUTE_COVERAGE_TILE_SIZE] = 0;
	}

	AllMemoryBarrierWithGroupSync();
	for (int j = 0; j < g_ObjectMipMapCounterValue[0]; j += COMPUTE_COVERAGE_TILE_SIZE * COMPUTE_COVERAGE_TILE_SIZE)
	{
		uint objectID, primitiveID, mipmapLevel;

		DecodeVisibilityBuffer(
			g_ObjectMipMap_consume.Consume(),
			/*out*/ objectID,
			/*out*/ primitiveID,
			/*out*/ mipmapLevel);

		// obtain highest mipmap level of object per thread group
		InterlockedMax(shared_Object_MipmapLevel[objectID], mipmapLevel);
	}
	
	AllMemoryBarrierWithGroupSync();
	// store data
	for (int k = 0; k < MAXIMAL_OBJECTS_PER_VIEW / (COMPUTE_COVERAGE_TILE_SIZE * COMPUTE_COVERAGE_TILE_SIZE); k++)
	{
		int index = groupIndex + k * COMPUTE_COVERAGE_TILE_SIZE * COMPUTE_COVERAGE_TILE_SIZE;
		g_ObjectToAtlasProperties[index].sizeExponent = (shared_Object_MipmapLevel[index]);
	}
}

// provides debug information
// -----------------------------------------------------------------------------
#pragma kernel DebugShowVertexID
RWTexture2D<float4> g_DebugTexture;
StructuredBuffer<ObjectToAtlasProperties> g_ObjectToAtlasPropertiesR;
int g_DebugPassID;

[numthreads(BLOCK_THREAD_SIZE, BLOCK_THREAD_SIZE,1)]
void DebugShowVertexID (uint3 id : SV_DispatchThreadID, uint groupIndex : SV_GroupIndex)
{
	uint objectID, primitiveID, mipmapLevel;
	DecodeVisibilityBuffer(
		g_VisibilityBuffer[id.xy],
		/*out*/ objectID,
		/*out*/ primitiveID,
		/*out*/ mipmapLevel); 


	uint baseIndex, subIndex;
	GetVisiblityIDIndicies(objectID, primitiveID, /*out*/ baseIndex, /*out*/ subIndex);

	half4 output = 0;
	float f;
	switch (g_DebugPassID)
	{
		case 1:
			f = objectID;// floor(primitiveID / PRIMITIVE_CLUSTER_SIZE);
			output = half4(sin(f), sin(f / 2), sin(f / 4), 0) * 0.5 + 0.5;
			break;
		case 2:
			f = floor(primitiveID / PRIMITIVE_CLUSTER_SIZE);
			output = half4(sin(f), sin(f / 63.0), sin(f / 511.0), 0) * 0.5 + 0.5;
			break;
		case 3:
			float mipmap_f = g_ObjectToAtlasPropertiesR[objectID].sizeExponent / 13.0;
			output = mipmap_f;
			break;
		case 4:
			output = mipmapLevel / 13.0;
			break;
	}

	g_DebugTexture[id.xy] = output;
	
}

// packs texel atlas
// -----------------------------------------------------------------------------

// julian: I use the morton-code / z-shape for atlas packing
// this makes the packing very much straight forward and the complexity for insertion is always O(1).
// But this only works, as long as the textures sizes are power-of-two (256, 512, 1024,...) and the largest textures are getting inserted first
uint2 GetTilePosition(uint index)
{
    return uint2(DecodeMorton2X(index), DecodeMorton2Y(index));
}

float4 GetTextureRect(uint index, uint tilesPerAxis)
{
	float2 atlasPosition_tileSpace = GetTilePosition(index);
    float2 min = atlasPosition_tileSpace * ATLAS_TILE_SIZE;
    float2 max = min + tilesPerAxis * ATLAS_TILE_SIZE;

	return float4(min, max);
}

float4 GetUVToAtlasScaleOffset(float4 atlasPixelSpace)
{
    return float4(atlasPixelSpace.zw - atlasPixelSpace.xy, atlasPixelSpace.xy);
}

#pragma kernel AtlasPacking

uint g_atlasAxisSize;
groupshared uint gshared_atlasIndex;
[numthreads(1,1,1)] 
void AtlasPacking(uint3 id : SV_DispatchThreadID, uint groupIndex : SV_GroupIndex)
{
	if (groupIndex == 0)
	{
		gshared_atlasIndex = 0;
	}
	AllMemoryBarrierWithGroupSync();

    // start with the highest exponent, this is very neccessary because of the sturcture of the morten code.
    [unroll]
	for (uint j = ATLAS_OBJECT_SIZEEXPONENT_MAX; ATLAS_OBJECT_SIZEEXPONENT_MIN <= j; j--)
	{
        //offset by 1, since 0 is undefined
        for (uint i = groupIndex + 1; i < g_totalObjectsInView; i++)
		{
			uint objectTileAxisExponent = g_ObjectToAtlasProperties[i].sizeExponent;
            if (objectTileAxisExponent == j)
            {
				// calculate object size in atlas units
                uint objectTilesAxis = pow(2, objectTileAxisExponent) / ATLAS_TILE_SIZE;
                uint objectTilesTotal = objectTilesAxis * objectTilesAxis;

                int atlasIndex;
                InterlockedAdd(gshared_atlasIndex, objectTilesTotal, /*out*/atlasIndex);
                float4 atlasRect = GetTextureRect(atlasIndex, objectTilesAxis);
                g_ObjectToAtlasProperties[i].atlas_ST = GetUVToAtlasScaleOffset(atlasRect) / (float) g_atlasAxisSize;
            }
        }
        AllMemoryBarrierWithGroupSync();
    }
}



#pragma kernel GetPixels
[numthreads(SINGLE_ROW_THREAD_SIZE, 1, 1)]
void GetPixels(uint3 id : SV_DispatchThreadID, uint groupIndex : SV_GroupIndex)
{

}